name: Build Scan and Publish
description: Build Scan and Publish a container to Container registry

inputs:
  registry:
    # ghcr or ecr
    description: Container registry type ('ecr' or 'ghcr')
    required: true
  registry_url:
    description: Container registry url (eg. ghcr.io)
    required: true

  # ECR settings
  aws-access-key-id:
    description: AWS access key ID
    required: false
  aws-secret-access-key:
    description: AWS secret key
    required: false
  aws-region:
    description: AWS Region
    required: false

  docker-user:
    description: Username for Docker login
    default: hip-ci
    required: false
  # GHCR token
  github-token:
    description: GITHUB_TOKEN
    default: ${{ github.token }}
    required: false
  npm-token:
    description: NPM PAT to use yarn hipagesgroup packages
    required: false

  # Lacework scan
  lw-access-token:
    description: Lancework access token
    required: false

  scan-docker-image:
    description: Set to true to enable container scanner
    required: false

  build-args:
    description: Buildx build-args
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - run: |
        grep -q @hipagesgroup yarn.lock && echo //npm.pkg.github.com/:_authToken=${{ inputs.npm-token }} >> .npmrc || true
      if: ${{ inputs.npm-token}}
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Github Container registry
      uses: docker/login-action@v2
      if: ${{ inputs.registry == 'ghcr' }}
      with:
        registry: ${{ inputs.registry_url }}
        username: ${{ inputs.docker-user }}
        password: ${{ inputs.github-token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: ${{ inputs.registry == 'ecr' }}
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: ${{ inputs.registry == 'ecr' }}

    - name: Setup Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.registry_url }}/${{ github.repository }}
        tags: |
          # ensure backwards compatibility
          type=raw,value=${{ env.CI_SHA_SHORT }}
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build, tag, and push image GHCR
      uses: docker/build-push-action@v3
      if: ${{ inputs.registry == 'ghcr' }}
      with:
        context: .
        pull: false
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          DOCKER_META_IMAGE=${{ inputs.registry_url }}/${{ github.repository }}
          ${{ inputs.build-args }}

    - name: Build, tag, and push image ECR
      uses: docker/build-push-action@v2
      if: ${{ inputs.registry == 'ecr' }}
      with:
        context: .
        pull: true
        push: true
        cache-from: type=registry,ref=${{ inputs.registry_url }}/${{ github.repository }}:latest
        cache-to: type=inline
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          DOCKER_META_IMAGE=${{ inputs.registry_url }}/${{ github.repository }}
          ${{ inputs.build-args }}
